# This is an autogenerated file for dynamic methods in Discount
# Please rerun rake rails_rbi:models[Discount] to regenerate.

# typed: strong
module Discount::ActiveRelation_WhereNot
  sig { params(opts: T.untyped, rest: T.untyped).returns(T.self_type) }
  def not(opts, *rest); end
end

module Discount::GeneratedAttributeMethods
  extend T::Sig

  sig { returns(T.nilable(String)) }
  def code; end

  sig { params(value: T.nilable(String)).void }
  def code=(value); end

  sig { returns(T::Boolean) }
  def code?; end

  sig { returns(DateTime) }
  def created_at; end

  sig { params(value: DateTime).void }
  def created_at=(value); end

  sig { returns(T::Boolean) }
  def created_at?; end

  sig { returns(Integer) }
  def id; end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(T.nilable(String)) }
  def image_url; end

  sig { params(value: T.nilable(String)).void }
  def image_url=(value); end

  sig { returns(T::Boolean) }
  def image_url?; end

  sig { returns(T.nilable(T.any(T::Array[T.untyped], T::Boolean, Float, T::Hash[T.untyped, T.untyped], Integer, String))) }
  def json; end

  sig { params(value: T.nilable(T.any(T::Array[T.untyped], T::Boolean, Float, T::Hash[T.untyped, T.untyped], Integer, String))).void }
  def json=(value); end

  sig { returns(T::Boolean) }
  def json?; end

  sig { returns(T.nilable(DateTime)) }
  def last_checked; end

  sig { params(value: T.nilable(DateTime)).void }
  def last_checked=(value); end

  sig { returns(T::Boolean) }
  def last_checked?; end

  sig { returns(T.nilable(String)) }
  def name; end

  sig { params(value: T.nilable(String)).void }
  def name=(value); end

  sig { returns(T::Boolean) }
  def name?; end

  sig { returns(T.nilable(BigDecimal)) }
  def price; end

  sig { params(value: T.nilable(BigDecimal)).void }
  def price=(value); end

  sig { returns(T::Boolean) }
  def price?; end

  sig { returns(T.nilable(T::Boolean)) }
  def removed; end

  sig { params(value: T.nilable(T::Boolean)).void }
  def removed=(value); end

  sig { returns(T::Boolean) }
  def removed?; end

  sig { returns(T.nilable(Integer)) }
  def store_id; end

  sig { params(value: T.nilable(Integer)).void }
  def store_id=(value); end

  sig { returns(T::Boolean) }
  def store_id?; end

  sig { returns(DateTime) }
  def updated_at; end

  sig { params(value: DateTime).void }
  def updated_at=(value); end

  sig { returns(T::Boolean) }
  def updated_at?; end
end

module Discount::GeneratedAssociationMethods
  extend T::Sig

  sig { returns(::DiscountProductTypeGroup::ActiveRecord_Associations_CollectionProxy) }
  def discount_product_type_groups; end

  sig { params(value: T.any(T::Array[::DiscountProductTypeGroup], ::DiscountProductTypeGroup::ActiveRecord_Associations_CollectionProxy)).void }
  def discount_product_type_groups=(value); end

  sig { returns(::ProductType::ActiveRecord_Associations_CollectionProxy) }
  def product_types; end

  sig { params(value: T.any(T::Array[::ProductType], ::ProductType::ActiveRecord_Associations_CollectionProxy)).void }
  def product_types=(value); end

  sig { returns(T.nilable(::Store)) }
  def store; end

  sig { params(value: T.nilable(::Store)).void }
  def store=(value); end
end

module Discount::CustomFinderMethods
  sig { params(limit: Integer).returns(T::Array[Discount]) }
  def first_n(limit); end

  sig { params(limit: Integer).returns(T::Array[Discount]) }
  def last_n(limit); end

  sig { params(args: T::Array[T.any(Integer, String)]).returns(T::Array[Discount]) }
  def find_n(*args); end

  sig { params(id: Integer).returns(T.nilable(Discount)) }
  def find_by_id(id); end

  sig { params(id: Integer).returns(Discount) }
  def find_by_id!(id); end
end

module Discount::ModelRelationShared
  extend T::Sig

  sig { returns(Discount::ActiveRecord_Relation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Discount::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Discount::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Discount::ActiveRecord_Relation) }
  def reselect(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Discount::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Discount::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Discount::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Discount::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Discount::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Discount::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Discount::ActiveRecord_Relation) }
  def left_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Discount::ActiveRecord_Relation) }
  def left_outer_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Discount::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Discount::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Discount::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Discount::ActiveRecord_Relation) }
  def extract_associated(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Discount::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Discount::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Discount::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Discount::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Discount::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Discount::ActiveRecord_Relation) }
  def extending(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Discount::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Discount::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Discount::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Discount::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Discount::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Discount::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Discount::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Discount::ActiveRecord_Relation) }
  def optimizer_hints(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Discount::ActiveRecord_Relation) }
  def merge(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Discount::ActiveRecord_Relation) }
  def except(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Discount::ActiveRecord_Relation) }
  def only(*args, &block); end
end

class Discount::ActiveRecord_Relation < ActiveRecord::Relation
  include Discount::ActiveRelation_WhereNot
  include SorbetRails::CustomFinderMethods
  include Discount::CustomFinderMethods
  include Enumerable
  include Discount::ModelRelationShared
  extend T::Sig
  extend T::Generic
  Elem = type_member(fixed: Discount)

  sig { params(args: T.untyped).returns(Discount) }
  def find(*args); end

  sig { params(args: T.untyped).returns(T.nilable(Discount)) }
  def find_by(*args); end

  sig { params(args: T.untyped).returns(Discount) }
  def find_by!(*args); end

  sig { returns(T.nilable(Discount)) }
  def first; end

  sig { returns(Discount) }
  def first!; end

  sig { returns(T.nilable(Discount)) }
  def second; end

  sig { returns(Discount) }
  def second!; end

  sig { returns(T.nilable(Discount)) }
  def third; end

  sig { returns(Discount) }
  def third!; end

  sig { returns(T.nilable(Discount)) }
  def third_to_last; end

  sig { returns(Discount) }
  def third_to_last!; end

  sig { returns(T.nilable(Discount)) }
  def second_to_last; end

  sig { returns(Discount) }
  def second_to_last!; end

  sig { returns(T.nilable(Discount)) }
  def last; end

  sig { returns(Discount) }
  def last!; end

  sig { params(conditions: T.untyped).returns(T::Boolean) }
  def exists?(conditions = nil); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def any?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def many?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def none?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def one?(*args); end

  sig { implementation.params(block: T.proc.params(e: Discount).void).void }
  def each(&block); end

  sig { params(level: T.nilable(Integer)).returns(T::Array[Discount]) }
  def flatten(level); end

  sig { returns(T::Array[Discount]) }
  def to_a; end
end

class Discount::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include Discount::ActiveRelation_WhereNot
  include SorbetRails::CustomFinderMethods
  include Discount::CustomFinderMethods
  include Enumerable
  include Discount::ModelRelationShared
  extend T::Sig
  extend T::Generic
  Elem = type_member(fixed: Discount)

  sig { params(args: T.untyped).returns(Discount) }
  def find(*args); end

  sig { params(args: T.untyped).returns(T.nilable(Discount)) }
  def find_by(*args); end

  sig { params(args: T.untyped).returns(Discount) }
  def find_by!(*args); end

  sig { returns(T.nilable(Discount)) }
  def first; end

  sig { returns(Discount) }
  def first!; end

  sig { returns(T.nilable(Discount)) }
  def second; end

  sig { returns(Discount) }
  def second!; end

  sig { returns(T.nilable(Discount)) }
  def third; end

  sig { returns(Discount) }
  def third!; end

  sig { returns(T.nilable(Discount)) }
  def third_to_last; end

  sig { returns(Discount) }
  def third_to_last!; end

  sig { returns(T.nilable(Discount)) }
  def second_to_last; end

  sig { returns(Discount) }
  def second_to_last!; end

  sig { returns(T.nilable(Discount)) }
  def last; end

  sig { returns(Discount) }
  def last!; end

  sig { params(conditions: T.untyped).returns(T::Boolean) }
  def exists?(conditions = nil); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def any?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def many?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def none?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def one?(*args); end

  sig { implementation.params(block: T.proc.params(e: Discount).void).void }
  def each(&block); end

  sig { params(level: T.nilable(Integer)).returns(T::Array[Discount]) }
  def flatten(level); end

  sig { returns(T::Array[Discount]) }
  def to_a; end

  sig { params(records: T.any(Discount, T::Array[Discount])).returns(T.self_type) }
  def <<(*records); end

  sig { params(records: T.any(Discount, T::Array[Discount])).returns(T.self_type) }
  def append(*records); end

  sig { params(records: T.any(Discount, T::Array[Discount])).returns(T.self_type) }
  def push(*records); end

  sig { params(records: T.any(Discount, T::Array[Discount])).returns(T.self_type) }
  def concat(*records); end
end

class Discount < ApplicationRecord
  include Discount::GeneratedAttributeMethods
  include Discount::GeneratedAssociationMethods
  extend SorbetRails::CustomFinderMethods
  extend Discount::CustomFinderMethods
  extend T::Sig
  extend T::Generic
  extend Discount::ModelRelationShared

  sig { params(args: T.untyped).returns(Discount) }
  def self.find(*args); end

  sig { params(args: T.untyped).returns(T.nilable(Discount)) }
  def self.find_by(*args); end

  sig { params(args: T.untyped).returns(Discount) }
  def self.find_by!(*args); end

  sig { returns(T.nilable(Discount)) }
  def self.first; end

  sig { returns(Discount) }
  def self.first!; end

  sig { returns(T.nilable(Discount)) }
  def self.second; end

  sig { returns(Discount) }
  def self.second!; end

  sig { returns(T.nilable(Discount)) }
  def self.third; end

  sig { returns(Discount) }
  def self.third!; end

  sig { returns(T.nilable(Discount)) }
  def self.third_to_last; end

  sig { returns(Discount) }
  def self.third_to_last!; end

  sig { returns(T.nilable(Discount)) }
  def self.second_to_last; end

  sig { returns(Discount) }
  def self.second_to_last!; end

  sig { returns(T.nilable(Discount)) }
  def self.last; end

  sig { returns(Discount) }
  def self.last!; end

  sig { params(conditions: T.untyped).returns(T::Boolean) }
  def self.exists?(conditions = nil); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def self.any?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def self.many?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def self.none?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def self.one?(*args); end
end
